---
title: "APIs in R: demos"
format:
  revealjs: 
    theme: dark
editor: source
editor_options: 
  chunk_output_type: console
---

# Example with Github

Github has an API. It can be helpful for finding information and doing operations
on repositories, users, and organizations. You can also manage issues, pull requests,
github actions, do code searching and other things. 

See all the possibilities here: https://docs.github.com/rest

This walkthrough is mostly for understanding the basics, there could be a package 
for something as popular as github already. ;)
[{gh}]("https://github.com/r-lib/gh) could be of interest : "Minimalistic 
GitHub API client in R."

Can I find anything out about AdminR github repo? How many repositories are contained 
in this organization?

```{r}
#| echo: true
## GitHub API URL for Swiss AdminR organization repositories
github_url <- "https://api.github.com/orgs/swiss-adminR/repos"

## Make the API request
response <- httr2::request(github_url) |>
  httr2::req_perform()
response

## Check the response status
httr2::resp_status(response)
```

Note: often possible to examine the expected url in a webbrowser. This can
be helpful for troubleshooting.

## Parsing the content

```{r}
#| echo: true
## Working with the headers
response |>
  httr2::resp_headers()

httr2::resp_header(response,
                   "content-type")

## Working with the body
json_response <- httr2::resp_body_json(response)
json_response

str(json_response)

str(json_response,
    max.level = 2,
    list.len = 8)
```


## Getting the names of the repos

```{r}
#| echo: true
## Extract the third element from each list element using sapply
sapply(json_response, function(x) x[3])

## Extract the third element from each list element using purrr
## map_chr() applies a function to each element in a list and returns
## type character
purrr::map_chr(json_response, ~ .[[3]])
```


## Parsing into a dataframe

```{r}
#| echo: true
## Convert JSON data to a data frame
json_df <- jsonlite::fromJSON(jsonlite::toJSON(json_response))
json_df

## How many repos?
nrow(json_df)
```


# Cytoscape

Create and manipulate a basic network in Cytoscape using {RCy3}.

Cytoscape has been popular for exploring biological, social and other kinds of 
networks. The software is very intuitive and helpful for data exploration and 
visualization, and also provides opportunities for automation.

```{r, eval=FALSE}
## to install RCy3
install.packages("devtools")
library(devtools)
install_github("cytoscape/RCy3",
               build_vignettes = FALSE)
```

In this example we will  test out using functions in a package that wraps the REST API, but we can also use cURL or other approaches.
In this Cytoscape example this can be useful if you are wanting to automate a plugin 
that does not have functions in the R package, but still exposes a REST API.


```{r}
#| echo: true
library(RCy3)
cytoscapePing()
cytoscapeVersionInfo()

## alternative ways with httr2:
cytoscape_version_req <- httr2::request("http://localhost:1234/v1/version") |>
  httr2::req_perform()

httr2::resp_body_json(cytoscape_version_req)

## Curl installed on my system
system("curl http://localhost:1234/v1/version")
```


As an aside, curl is a versatile command-line tool for making HTTP requests, and it can be used for various types of requests, not just GET. By default, when you use curl without specifying a request method, it performs a GET request. You can also specify POST or PUT verbs. 

## Simple network example

Imagine a bicycle club, a close-knit community bonded by a love for cycling. In this simple social network, individuals are nodes, and their relationships are captured by edges. 

Each person is associated with attributes: 'group' signifies their location, 'score' tracks outing attendance.

The edges represent the personal connections and the weight reveals the number of times members collaborated in organizing post-ride refreshments. 



```{r}
#| echo: true
nodes <- data.frame(id = c("node 0", "node 1", "node 2", "node 3", "node 4", "node 5", "node 6"),
                    group = c("A", "A", "B", "B", "C", "C", "C"), # categorical strings
                    score = as.integer(c(20, 10, 15, 5, 20, 5, 10)), # integers
                    stringsAsFactors = FALSE)
edges <- data.frame(source = c("node 0", "node 0", "node 0", "node 2", "node 2", "node 5", "node 4", "node 5", "node 1"),
                    target = c("node 1", "node 2", "node 3", "node 3", "node 4", "node 6", "node 6", "node 1", "node 3"),
                    weight = c(4, 3, 5, 1, 4, 4, 6, 5, 3), # integers
                    stringsAsFactors = FALSE)

simple_graph_ig <- igraph::graph_from_data_frame(edges, vertices = nodes)
plot(simple_graph_ig)

createNetworkFromDataFrames(nodes, 
                            edges,
                            title = "A bicycle club network")

layoutNetwork("circular")
layoutNetwork("cose")
setNodeShapeDefault("OCTAGON")
setVisualStyle("Marquee")
setVisualStyle("default")
setNodeColorDefault("#AAFF88")
setNodeSizeDefault(60)
setNodeFontSizeDefault(5)
```

In the context of Cytoscape, "mapping" typically refers to associating data attributes with visual properties of the network elements (e.g., nodes or edges). This process allows you to visually represent and analyze patterns or relationships present in your data.

You can do this with data included with the nodes or edges are by associating another dataset. 

```{r}
#| echo: true
style_name <-  "myStyle"
defaults <- list(NODE_SHAPE = "diamond",
                 NODE_SIZE = 30,
                 EDGE_TRANSPARENCY = 120)
edge_width <- mapVisualProperty("edge width",
                                "weight",
                                "p") ## p for passthrough

## The term "passthrough" implies that the values of these visual properties 
## are passed through from the associated data columns without any transformation

node_fill <- mapVisualProperty("node fill color",
                               "score",
                               "c",
                               c(5, 10, 20),
                               c("#99CCFF", "#FFFFFF", "#FF7777"))
node_label <- mapVisualProperty("node label", "group", "p")

createVisualStyle(style_name, defaults, list(edge_width, node_fill, node_label))
setVisualStyle(style_name)
```


## Cytoscape API documentation
There is quite a bit of documentation available. This Swagger documentation is available for many APIs.

```{r}
#| echo: true
cyrestAPI()  # CyREST API
commandsAPI()  # Commands API
```


# DeepL API

There are many different tools for doing translations. Deepl API is a 
possibility. This example is using the free version and requires a "DeepL-Auth-Key" which can be obtained when you sign up. 

This has been based on prototyping we were doing where we needed some translations
https://www.deepl.com/en/docs-api/

From the documentation, We get an example command for curl. How can we use that in R?

```         
curl https://api-free.deepl.com/v2/translate -X POST  --header 'Authorization: DeepL-Auth-Key myauthkey' --data-urlencode 'text=Hello, world!' --data-urlencode 'target_lang=DE'
```

Several options:

-   Use the curl command with {curl} or {crul} 
-   Adapt to use with {httr2} (or older {httr})
-   Also could use `system()` to run cURL command in system shell

Here we will look at using the curl command with {httr2}

```{r}
#| echo: true
httr2::curl_translate("curl http://example.com")

## Just a way to get you started, but not all the way there
httr2::curl_translate("curl 'https://api-free.deepl.com/v2/translate' -X POST --header 'Authorization: DeepL-Auth-Key myauthkey' --data-urlencode 'text=The raccoon is sleeping in the tree. target_lang=DE' ",
                      simplify_headers = FALSE)
```

We can use that output to get started, but will add our needed query info after. 

## Constructing the request

We can also use `httr2::req_dry_run()` instead of `httr2::req_perform()` to test out the
request (did not include the example as this prints the Authorization to the 
screen and doc).

```{r}
#| echo: true
response <- httr2::request("https://api-free.deepl.com/v2/translate") |>
  httr2::req_method("POST") |>
  httr2::req_headers(Authorization = paste0("DeepL-Auth-Key ",
                                            Sys.getenv("DEEPL_AUTH"))) |>
  httr2::req_url_query(text = "The raccoon is sleeping in the tree.") |>
  httr2::req_url_query(target_lang = "DE") |>
  httr2::req_perform()

# Check the response status
httr2::resp_status(response)
# Parse the content
httr2::resp_body_json(response)

httr2::resp_header(response,
                   "content-type")
```

## Reponse of translated text

```{r}
#| echo: true
# Extract and display the translated text
translated_text <- httr2::resp_body_json(response)$translations[[1]]$text
translated_text
```

## Do language detection

We can take a very similar approach, and add in that the language is detected during
the translation.

```{r}
#| echo: true
# Modify the request to include language detection
# Language detection request
response_lang_detection <- httr2::request("https://api-free.deepl.com/v2/translate") |>
  httr2::req_method("POST") |>
  httr2::req_headers(
    Authorization = paste0("DeepL-Auth-Key ",
                           Sys.getenv("DEEPL_AUTH"))
  ) |>
  httr2::req_url_query(text = "The raccoon is sleeping in the tree.") |>
  httr2::req_url_query(source_lang_auto = "1") |>
  httr2::req_url_query(target_lang = "DE") |>
  httr2::req_perform()

# Check the response status
status_code_detection <- httr2::resp_status(response_lang_detection)

# Check for successful response or handle errors
if (status_code_detection == 200) {
  detected_language <- httr2::resp_body_json(response_lang_detection)$translations[[1]]$detected_source_language
  message("Detected Source Language:",
          detected_language,
          "\n")
} else {
  message("Error:",
          httr2::resp_body_json(response_lang_detection),
          "\n")
}
```


